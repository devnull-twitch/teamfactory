[gd_resource type="VisualShader" load_steps=20 format=2]

[ext_resource path="res://actors/gui/UnlockBorder.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeTexture" id=11]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=12]
operator = 6

[sub_resource type="VisualShaderNodeIf" id=13]

[sub_resource type="VisualShaderNodeVectorDecompose" id=14]

[sub_resource type="VisualShaderNodeVectorCompose" id=15]

[sub_resource type="VisualShaderNodeIf" id=16]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, 0.0, 2, 1e-05, 3, Vector3( 0, 0, 0 ), 4, Vector3( 0, 0, 0 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeScalarUniform" id=17]
uniform_name = "Unlockable"

[sub_resource type="VisualShaderNodeTextureUniform" id=1]
uniform_name = "ButtonTexture"

[sub_resource type="VisualShaderNodeVectorDecompose" id=18]

[sub_resource type="VisualShaderNodeVectorCompose" id=19]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeIf" id=20]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarUniform" id=4]
uniform_name = "Unlocked"

[sub_resource type="VisualShaderNodeVectorDecompose" id=5]

[sub_resource type="VisualShaderNodeVectorCompose" id=6]

[sub_resource type="VisualShaderNodeScalarOp" id=7]

[sub_resource type="VisualShaderNodeScalarOp" id=8]

[sub_resource type="VisualShaderNodeScalarOp" id=9]
default_input_values = [ 0, 0.0, 1, 3.0 ]
operator = 3

[sub_resource type="VisualShaderNodeIf" id=10]

[resource]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_10;
uniform float Unlocked;
uniform sampler2D ButtonTexture;
uniform float Unlockable;



void vertex() {
// Output:0

}

void fragment() {
// Texture:10
	vec4 tex_frg_10_read = texture(tex_frg_10, UV.xy);
	vec3 n_out10p0 = tex_frg_10_read.rgb;
	float n_out10p1 = tex_frg_10_read.a;

// ScalarUniform:3
	float n_out3p0 = Unlocked;

// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture(ButtonTexture, UV.xy);
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// VectorDecompose:4
	float n_out4p0 = n_out2p0.x;
	float n_out4p1 = n_out2p0.y;
	float n_out4p2 = n_out2p0.z;

// ScalarOp:6
	float n_out6p0 = n_out4p0 + n_out4p1;

// ScalarOp:7
	float n_out7p0 = n_out6p0 + n_out4p2;

// ScalarOp:8
	float n_in8p1 = 3.00000;
	float n_out8p0 = n_out7p0 / n_in8p1;

// VectorCompose:5
	vec3 n_out5p0 = vec3(n_out8p0, n_out8p0, n_out8p0);

// If:9
	float n_in9p1 = 0.00000;
	float n_in9p2 = 0.00001;
	vec3 n_in9p5 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out9p0;
	if(abs(n_out3p0 - n_in9p1) < n_in9p2)
	{
		n_out9p0 = n_out5p0;
	}
	else if(n_out3p0 < n_in9p1)
	{
		n_out9p0 = n_in9p5;
	}
	else
	{
		n_out9p0 = n_out2p0;
	}

// ScalarUniform:19
	float n_out19p0 = Unlockable;

// VectorDecompose:20
	float n_out20p0 = n_out10p0.x;
	float n_out20p1 = n_out10p0.y;
	float n_out20p2 = n_out10p0.z;

// VectorCompose:21
	float n_in21p1 = 0.00000;
	float n_in21p2 = 0.00000;
	vec3 n_out21p0 = vec3(n_out20p0, n_in21p1, n_in21p2);

// If:22
	float n_in22p1 = 0.00000;
	float n_in22p2 = 0.00001;
	vec3 n_in22p5 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out22p0;
	if(abs(n_out19p0 - n_in22p1) < n_in22p2)
	{
		n_out22p0 = n_out21p0;
	}
	else if(n_out19p0 < n_in22p1)
	{
		n_out22p0 = n_in22p5;
	}
	else
	{
		n_out22p0 = n_out10p0;
	}

// VectorDecompose:16
	float n_out16p0 = n_out10p0.x;
	float n_out16p1 = n_out10p0.y;
	float n_out16p2 = n_out10p0.z;

// VectorCompose:17
	vec3 n_out17p0 = vec3(n_out16p2, n_out16p0, n_out16p1);

// If:18
	float n_in18p1 = 0.00000;
	float n_in18p2 = 0.00001;
	vec3 n_in18p5 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out18p0;
	if(abs(n_out3p0 - n_in18p1) < n_in18p2)
	{
		n_out18p0 = n_out22p0;
	}
	else if(n_out3p0 < n_in18p1)
	{
		n_out18p0 = n_in18p5;
	}
	else
	{
		n_out18p0 = n_out17p0;
	}

// If:15
	float n_in15p1 = 0.00000;
	float n_in15p2 = 0.00001;
	vec3 n_in15p5 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out15p0;
	if(abs(n_out10p1 - n_in15p1) < n_in15p2)
	{
		n_out15p0 = n_out9p0;
	}
	else if(n_out10p1 < n_in15p1)
	{
		n_out15p0 = n_in15p5;
	}
	else
	{
		n_out15p0 = n_out18p0;
	}

// ScalarOp:14
	float n_out14p0 = max(n_out2p1, n_out10p1);

// Output:0
	COLOR.rgb = n_out15p0;
	COLOR.a = n_out14p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -110.67, 606.219 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1560, 360 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -400, 240 )
nodes/fragment/3/node = SubResource( 4 )
nodes/fragment/3/position = Vector2( -160, 500 )
nodes/fragment/4/node = SubResource( 5 )
nodes/fragment/4/position = Vector2( -80, 200 )
nodes/fragment/5/node = SubResource( 6 )
nodes/fragment/5/position = Vector2( 820, 160 )
nodes/fragment/6/node = SubResource( 7 )
nodes/fragment/6/position = Vector2( 360, 60 )
nodes/fragment/7/node = SubResource( 8 )
nodes/fragment/7/position = Vector2( 420, 220 )
nodes/fragment/8/node = SubResource( 9 )
nodes/fragment/8/position = Vector2( 620, 140 )
nodes/fragment/9/node = SubResource( 10 )
nodes/fragment/9/position = Vector2( 1120, 180 )
nodes/fragment/10/node = SubResource( 11 )
nodes/fragment/10/position = Vector2( -200, 720 )
nodes/fragment/14/node = SubResource( 12 )
nodes/fragment/14/position = Vector2( 980, 380 )
nodes/fragment/15/node = SubResource( 13 )
nodes/fragment/15/position = Vector2( 1300, 440 )
nodes/fragment/16/node = SubResource( 14 )
nodes/fragment/16/position = Vector2( 40, 580 )
nodes/fragment/17/node = SubResource( 15 )
nodes/fragment/17/position = Vector2( 300, 520 )
nodes/fragment/18/node = SubResource( 16 )
nodes/fragment/18/position = Vector2( 860, 680 )
nodes/fragment/19/node = SubResource( 17 )
nodes/fragment/19/position = Vector2( -180, 1000 )
nodes/fragment/20/node = SubResource( 18 )
nodes/fragment/20/position = Vector2( 120, 1020 )
nodes/fragment/21/node = SubResource( 19 )
nodes/fragment/21/position = Vector2( 400, 1000 )
nodes/fragment/22/node = SubResource( 20 )
nodes/fragment/22/position = Vector2( 600, 800 )
nodes/fragment/connections = PoolIntArray( 2, 0, 4, 0, 4, 0, 6, 0, 4, 1, 6, 1, 6, 0, 7, 0, 4, 2, 7, 1, 7, 0, 8, 0, 8, 0, 5, 0, 8, 0, 5, 1, 8, 0, 5, 2, 5, 0, 9, 3, 3, 0, 9, 0, 2, 0, 9, 4, 10, 1, 14, 1, 14, 0, 0, 1, 2, 1, 14, 0, 10, 1, 15, 0, 15, 0, 0, 0, 9, 0, 15, 3, 10, 0, 16, 0, 18, 0, 15, 4, 17, 0, 18, 4, 16, 0, 17, 1, 16, 1, 17, 2, 16, 2, 17, 0, 3, 0, 18, 0, 10, 0, 20, 0, 20, 0, 21, 0, 22, 0, 18, 3, 10, 0, 22, 4, 21, 0, 22, 3, 19, 0, 22, 0 )
