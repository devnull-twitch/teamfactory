[gd_resource type="ShaderMaterial" load_steps=9 format=2]

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=10]
output_port_for_preview = 0
input_name = "screen_texture"

[sub_resource type="VisualShaderNodeTexture" id=11]
output_port_for_preview = 0
source = 5

[sub_resource type="VisualShaderNodeInput" id=12]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeVectorOp" id=15]
default_input_values = [ 0, Vector3( 1, 1, 1 ), 1, Vector3( 1, 1, 1 ) ]
operator = 1

[sub_resource type="VisualShaderNodeInput" id=13]
input_name = "texture"

[sub_resource type="VisualShaderNodeTexture" id=14]
source = 5

[sub_resource type="VisualShader" id=7]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Input:14
	vec3 n_out14p0 = vec3(SCREEN_UV, 0.0);

// Input:12

// Texture:13
	vec3 n_out13p0;
	float n_out13p1;
	{
		vec4 SCREEN_TEXTURE_tex_read = texture(SCREEN_TEXTURE, n_out14p0.xy);
		n_out13p0 = SCREEN_TEXTURE_tex_read.rgb;
		n_out13p1 = SCREEN_TEXTURE_tex_read.a;
	}

// VectorOp:15
	vec3 n_in15p0 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_out15p0 = n_in15p0 - n_out13p0;

// Input:10
	vec3 n_out10p0 = vec3(UV, 0.0);

// Input:8

// Texture:9
	vec3 n_out9p0;
	float n_out9p1;
	{
		vec4 TEXTURE_tex_read = texture(TEXTURE, n_out10p0.xy);
		n_out9p0 = TEXTURE_tex_read.rgb;
		n_out9p1 = TEXTURE_tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out15p0;
	COLOR.a = n_out9p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -457.62, -66.699 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 20, 120 )
nodes/fragment/8/node = SubResource( 13 )
nodes/fragment/8/position = Vector2( -680, 400 )
nodes/fragment/9/node = SubResource( 14 )
nodes/fragment/9/position = Vector2( -360, 260 )
nodes/fragment/10/node = SubResource( 9 )
nodes/fragment/10/position = Vector2( -680, 300 )
nodes/fragment/12/node = SubResource( 10 )
nodes/fragment/12/position = Vector2( -1140, 240 )
nodes/fragment/13/node = SubResource( 11 )
nodes/fragment/13/position = Vector2( -640, 20 )
nodes/fragment/14/node = SubResource( 12 )
nodes/fragment/14/position = Vector2( -1140, 120 )
nodes/fragment/15/node = SubResource( 15 )
nodes/fragment/15/position = Vector2( -320, 0 )
nodes/fragment/connections = PoolIntArray( 8, 0, 9, 2, 10, 0, 9, 0, 12, 0, 13, 2, 14, 0, 13, 0, 15, 0, 0, 0, 13, 0, 15, 1, 9, 1, 0, 1 )

[resource]
shader = SubResource( 7 )
