[gd_resource type="ShaderMaterial" load_steps=9 format=2]

[ext_resource path="res://sprites/ConnectionArrow.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeTexture" id=1]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDecompose" id=4]

[sub_resource type="VisualShaderNodeInput" id=5]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=6]
operator = 1

[sub_resource type="VisualShaderNodeVectorCompose" id=7]

[sub_resource type="VisualShader" id=2]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_2;



void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// VectorDecompose:4
	float n_out4p0 = n_out3p0.x;
	float n_out4p1 = n_out3p0.y;
	float n_out4p2 = n_out3p0.z;

// Input:5
	float n_out5p0 = TIME;

// ScalarOp:6
	float n_out6p0 = n_out4p0 - n_out5p0;

// VectorCompose:7
	vec3 n_out7p0 = vec3(n_out6p0, n_out4p1, n_out4p2);

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out7p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Output:0
	COLOR.rgb = n_out2p0;
	COLOR.a = n_out2p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -688.236, -131.75 )
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 100, 20 )
nodes/fragment/3/node = SubResource( 3 )
nodes/fragment/3/position = Vector2( -900, 140 )
nodes/fragment/4/node = SubResource( 4 )
nodes/fragment/4/position = Vector2( -640, 140 )
nodes/fragment/5/node = SubResource( 5 )
nodes/fragment/5/position = Vector2( -680, 20 )
nodes/fragment/6/node = SubResource( 6 )
nodes/fragment/6/position = Vector2( -400, 40 )
nodes/fragment/7/node = SubResource( 7 )
nodes/fragment/7/position = Vector2( -160, 140 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 2, 1, 0, 1, 3, 0, 4, 0, 6, 0, 7, 0, 7, 0, 2, 0, 4, 1, 7, 1, 4, 2, 7, 2, 4, 0, 6, 0, 5, 0, 6, 1 )

[resource]
shader = SubResource( 2 )
